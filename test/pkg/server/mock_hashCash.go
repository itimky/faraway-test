// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockhashCash is an autogenerated mock type for the hashCash type
type MockhashCash struct {
	mock.Mock
}

type MockhashCash_Expecter struct {
	mock *mock.Mock
}

func (_m *MockhashCash) EXPECT() *MockhashCash_Expecter {
	return &MockhashCash_Expecter{mock: &_m.Mock}
}

// GenerateChallenge provides a mock function with given fields:
func (_m *MockhashCash) GenerateChallenge() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerateChallenge")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockhashCash_GenerateChallenge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateChallenge'
type MockhashCash_GenerateChallenge_Call struct {
	*mock.Call
}

// GenerateChallenge is a helper method to define mock.On call
func (_e *MockhashCash_Expecter) GenerateChallenge() *MockhashCash_GenerateChallenge_Call {
	return &MockhashCash_GenerateChallenge_Call{Call: _e.mock.On("GenerateChallenge")}
}

func (_c *MockhashCash_GenerateChallenge_Call) Run(run func()) *MockhashCash_GenerateChallenge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockhashCash_GenerateChallenge_Call) Return(_a0 string, _a1 error) *MockhashCash_GenerateChallenge_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockhashCash_GenerateChallenge_Call) RunAndReturn(run func() (string, error)) *MockhashCash_GenerateChallenge_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateSolution provides a mock function with given fields: challenge, solution
func (_m *MockhashCash) ValidateSolution(challenge string, solution int) error {
	ret := _m.Called(challenge, solution)

	if len(ret) == 0 {
		panic("no return value specified for ValidateSolution")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(challenge, solution)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockhashCash_ValidateSolution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateSolution'
type MockhashCash_ValidateSolution_Call struct {
	*mock.Call
}

// ValidateSolution is a helper method to define mock.On call
//   - challenge string
//   - solution int
func (_e *MockhashCash_Expecter) ValidateSolution(challenge interface{}, solution interface{}) *MockhashCash_ValidateSolution_Call {
	return &MockhashCash_ValidateSolution_Call{Call: _e.mock.On("ValidateSolution", challenge, solution)}
}

func (_c *MockhashCash_ValidateSolution_Call) Run(run func(challenge string, solution int)) *MockhashCash_ValidateSolution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *MockhashCash_ValidateSolution_Call) Return(_a0 error) *MockhashCash_ValidateSolution_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockhashCash_ValidateSolution_Call) RunAndReturn(run func(string, int) error) *MockhashCash_ValidateSolution_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockhashCash creates a new instance of MockhashCash. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockhashCash(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockhashCash {
	mock := &MockhashCash{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
