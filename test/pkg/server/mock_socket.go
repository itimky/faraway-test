// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Mocksocket is an autogenerated mock type for the socket type
type Mocksocket struct {
	mock.Mock
}

type Mocksocket_Expecter struct {
	mock *mock.Mock
}

func (_m *Mocksocket) EXPECT() *Mocksocket_Expecter {
	return &Mocksocket_Expecter{mock: &_m.Mock}
}

// Recv provides a mock function with given fields:
func (_m *Mocksocket) Recv() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Recv")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mocksocket_Recv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Recv'
type Mocksocket_Recv_Call struct {
	*mock.Call
}

// Recv is a helper method to define mock.On call
func (_e *Mocksocket_Expecter) Recv() *Mocksocket_Recv_Call {
	return &Mocksocket_Recv_Call{Call: _e.mock.On("Recv")}
}

func (_c *Mocksocket_Recv_Call) Run(run func()) *Mocksocket_Recv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Mocksocket_Recv_Call) Return(_a0 []byte, _a1 error) *Mocksocket_Recv_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mocksocket_Recv_Call) RunAndReturn(run func() ([]byte, error)) *Mocksocket_Recv_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: data
func (_m *Mocksocket) Send(data []byte) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mocksocket_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type Mocksocket_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - data []byte
func (_e *Mocksocket_Expecter) Send(data interface{}) *Mocksocket_Send_Call {
	return &Mocksocket_Send_Call{Call: _e.mock.On("Send", data)}
}

func (_c *Mocksocket_Send_Call) Run(run func(data []byte)) *Mocksocket_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Mocksocket_Send_Call) Return(_a0 error) *Mocksocket_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mocksocket_Send_Call) RunAndReturn(run func([]byte) error) *Mocksocket_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMocksocket creates a new instance of Mocksocket. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMocksocket(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mocksocket {
	mock := &Mocksocket{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
