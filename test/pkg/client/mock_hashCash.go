// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockhashCash is an autogenerated mock type for the hashCash type
type MockhashCash struct {
	mock.Mock
}

type MockhashCash_Expecter struct {
	mock *mock.Mock
}

func (_m *MockhashCash) EXPECT() *MockhashCash_Expecter {
	return &MockhashCash_Expecter{mock: &_m.Mock}
}

// SolveChallenge provides a mock function with given fields: challenge, difficulty
func (_m *MockhashCash) SolveChallenge(challenge string, difficulty int) int {
	ret := _m.Called(challenge, difficulty)

	if len(ret) == 0 {
		panic("no return value specified for SolveChallenge")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(string, int) int); ok {
		r0 = rf(challenge, difficulty)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockhashCash_SolveChallenge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SolveChallenge'
type MockhashCash_SolveChallenge_Call struct {
	*mock.Call
}

// SolveChallenge is a helper method to define mock.On call
//   - challenge string
//   - difficulty int
func (_e *MockhashCash_Expecter) SolveChallenge(challenge interface{}, difficulty interface{}) *MockhashCash_SolveChallenge_Call {
	return &MockhashCash_SolveChallenge_Call{Call: _e.mock.On("SolveChallenge", challenge, difficulty)}
}

func (_c *MockhashCash_SolveChallenge_Call) Run(run func(challenge string, difficulty int)) *MockhashCash_SolveChallenge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *MockhashCash_SolveChallenge_Call) Return(_a0 int) *MockhashCash_SolveChallenge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockhashCash_SolveChallenge_Call) RunAndReturn(run func(string, int) int) *MockhashCash_SolveChallenge_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockhashCash creates a new instance of MockhashCash. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockhashCash(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockhashCash {
	mock := &MockhashCash{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
